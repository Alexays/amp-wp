name: QA - Integrate

on:
  push:
    paths:
      - 'qa-tester/**'
    branches:
      - master
      - develop
      # Include all release branches.
      - '[0-9].[0-9]'
  pull_request:

defaults:
  run:
    working-directory: qa-tester

jobs:
  lint-css:
    name: Lint CSS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: npm ci
        env:
          CI: true

      - name: Detect coding standard violations (stylelint)
        run: npm run lint:css

#-----------------------------------------------------------------------------------------------------------------------

  lint-js:
    name: Lint JS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: npm ci
        env:
          CI: true

      - name: Validate package.json
        run: npm run lint:pkg-json

      - name: Detect coding standard violations (ESLint)
        run: npm run lint:js:report
        continue-on-error: true

      - name: Annotate code linting results
        uses: ataylorme/eslint-annotate-action@1.0.4
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          report-json: 'qa-tester/lint-js-report.json'

#-----------------------------------------------------------------------------------------------------------------------

  lint-php:
    name: Lint PHP
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer, cs2pr

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Configure Composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --optimize-autoloader  --no-suggest --no-progress --no-interaction

      - name: Validate composer.json
        run: composer --no-interaction validate --no-check-all

      - name: Detect coding standard violations (PHPCS)
        run: vendor/bin/phpcs -q --report=checkstyle --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 | cs2pr --graceful-warnings

#-----------------------------------------------------------------------------------------------------------------------

  release-zip:
    name: Build release build ZIP and upload as GHA artifact
    needs: [lint-css, lint-js, lint-php]
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.retrieve-branch-name.outputs.branch_name }}
      git-sha-8: ${{ steps.retrieve-git-sha-8.outputs.sha8 }}

    steps:
      - name: Check out source files
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Configure Composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --optimize-autoloader --no-scripts

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: npm ci
        env:
          CI: true

      - name: Build release version
        run: npm run build

      - name: Retrieve branch name
        id: retrieve-branch-name
        run: echo "::set-output name=branch_name::$(REF=${GITHUB_HEAD_REF:-$GITHUB_REF} && echo ${REF#refs/heads/} | sed 's/\//-/g')"

      - name: Retrieve git SHA-8 string
        id: retrieve-git-sha-8
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Upload build as artifact
        uses: actions/upload-artifact@v2
        with:
          name: amp-qa-tester-${{ steps.retrieve-branch-name.outputs.branch_name }}-${{ steps.retrieve-git-sha-8.outputs.sha8 }}
          path: amp-qa-tester.zip

#-----------------------------------------------------------------------------------------------------------------------

  upload-to-gcs:
    name: Upload plugin ZIP to Google Cloud Storage
    runs-on: ubuntu-latest
    needs:
      - release-zip
    steps:
      - name: Download plugin build
        uses: actions/download-artifact@v2
        with:
          name: amp-qa-tester-${{ needs.dev-zip.outputs.branch-name }}-${{ needs.dev-zip.outputs.git-sha-8 }}

      - name: Setup Google Cloud SDK
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GCS_APPLICATION_CREDENTIALS }}

      - name: Upload build to bucket
        run: gsutil cp amp-qa-tester.zip gs://ampwp_github_artifacts/${{ github.ref }}/
